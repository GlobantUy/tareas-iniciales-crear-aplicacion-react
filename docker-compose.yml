version: "3"
services:
  mongodb:
    image: mongo:latest
    restart: always
    container_name: ${PROJECT_NAME}-mongodb
    environment:
      #AUTH: "yes"
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER_ENV}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASS_ROOT}
      MONGO_INITDB_DATABASE: ${DB_NAME}
      #MONGO_INITDB_USERNAME: ${DB_USER}
      #MONGO_INITDB_PASSWORD: ${DB_PASS}
    volumes:
      - ./data-node:/data/db
      # - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - 27017:27017
    command: mongod
    #command: mongod --noauth
    networks:
      - webappnetwork

  api:
    image: ${PROJECT_NAME}_app_api
    restart: unless-stopped
    container_name: ${PROJECT_NAME}-app-api
    build: 
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    #environment:
      #CONN_STRING: ${CONN_STRING}
      #NODE_ENV: ${NODE_ENV}
      #CORS_ORIGIN: ${DAE}
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
    networks:
      - webappnetwork

  frontend:
    image: ${PROJECT_NAME}_app_frontend
    restart: unless-stopped
    container_name: ${PROJECT_NAME}-app-frontend
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    #env_file:
    #  - ./frontend/.env
    environment:
      #CONN_STRING: ${CONN_STRING}
      NODE_ENV: ${NODE_ENV}
      VERCEL: ${VERCEL}
      STAGING: ${STAGING}
      #CORS_ORIGIN: ${DAE}
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - api
    networks:
      - webappnetwork

networks:
  webappnetwork:
    driver: bridge

volumes:
  data-node: {}